

breed [actors actor]
actors-own [
  my_mailbox ;; the mailbox to use for the actor / routing 
  worker-list ;; the list of workers
  routing ;; the routing to use
  resizing ;; the resizing strategy to use
  
  ;; interface 
  remaining_tasks ;; the total amount of tasks the actor has currently
  actual_worker_count
]

;; creates a new actor on the given position and with the given name (label)
to-report new-actor [pos-x pos-y name]
  let w nobody
  let mbox new-mailbox
  create-actors 1 [
    set size 2
    set w self
    set xcor pos-x
    set ycor pos-y
    set shape "pentagon"
    set color 104
    set label name
    set my_mailbox mbox
    set routing [ [message] -> ] ;; nop impl
    set remaining_tasks 0
    set actual_worker_count 0
    set resizing nobody ;; nop impl
  ]
  print "created a new Actor"
  report w
end

;; sends the given task to the given actor
to send-to-actor [act task]
  ask act [
     enqueue-task my_mailbox task
  ]
end

;; reports the total amount of tasks of the actor
to-report total-worker-tasks [wList]
  
  let wSizes map [ [w] -> queue-size? w ] wList
  report reduce + wSizes
end

;; the main actor loop to run one tick for the actors
to actor-loop 
  
  ;; count remaining messages
  ask actors [
    let workerTasks total-worker-tasks worker-list
    let routerTasks messages? my_mailbox
    set remaining_tasks workerTasks + routerTasks
  ]
  
  let resizeActorsList []
  ;; routing
  ask actors [
    
    ;; look for messages inside the mailbox and route them
    if has-task my_mailbox [
      let message dequeue-task my_mailbox
      (run routing message)
    ]
    
    ;; if we have defined a resizer execute it here
    if resizing != nobody [
      
      set resizeActorsList lput self resizeActorsList
      
      ;; before resizing we have to clear the worker-list
      let wAgentSet to-turtleset worker-list
      let clearableWorkers wAgentSet with [can-be-cleared?]
      set wAgentSet wAgentSet with [not can-be-cleared?]
      let newWList to-list wAgentSet ;; workaround for converting list to agentsets and vise versa ...
      set worker-list newWList
      ask clearableWorkers [die]
    ]
  ]
  
  foreach resizeActorsList [ [ra] ->
    
    let wCount 0
    let wList []
    ask ra [
      set wList worker-list
      ask resizing [
        set wCount (runresult resize-executor wList)
      ]
    ]
    
    ;; print word "wCount: " wCount
    
    if wCount > 0 [
      ;; add workers
      repeat wCount [
        let w new-worker
        set wList lput w wList
      ]
    ]
  
    if wCount < 0 [
      ;; remove workers, aka poison pill
      set wCount abs wCount ;; we need positive values here
      ask ra [ ask resizing [ (run resize-remover wList wCount) ] ]
    ]
    
    ask ra [
      set worker-list wList
      set actual_worker_count length wList
    ]
  ]
  
end